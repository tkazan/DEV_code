1. Wszystko co wprowadzamy do programu: imput() jest stringiem. Dlatego jeśli potrzebujemy wczytać liczby, należy jeszcze zamienić to na int lub float np.
age = input("Podaj swój wiek: ")
age = int(age) lub float(age)

lub od razu: age = int(imput("Podaj swój wiek: "))

2. Po co stosować pass (spasuj) --> np kiedy tworzymy szkielet programu
tworzymy sobie funkcję, ale póki co nie chcemy, żeby się wykonała

3. Domyślnie każdy print wykonuje się w osobnej linii

4. W funkcjach: RETURN - zwraca wartość i WYCHODZI Z FUNKCJI

5. Nawet jeśli funkcja nie ma argumentów, to żeby ją wywołać musimy użyć nawiasów np.

def do_nothing():
    pass
print(do_nothing())

6. Funkcje mogą mieć parametry domyślne:
def sum(a, b, c = 2): 
#jeżeli nie podamy żadnego c, to domyślnie przyjmie wartość 2
   return a + b + c
sum(1, 10) --> 13

7. Domyślne wartości funkcji muszą być podane zawsze na końcu, 
jeżeli po wartościach domyślnych będzie wartość niedomyślna wyskoczy błąd.
Wartości domyślnych może być więcej niż 1.

8. Funkcje można wywołać na 2 sposoby, przez: kolejność i przez nazwę
a = 10
b = 5
def sub(a, b):
    return b - a
sub(a, b) --> -5
sub(b, a) --> 5
sub(a=a, b=b) --> -5
sub(b=b, a=a) --> -5

9. Magiczne parametry funkcji: 
*args - dodanie dowolnej ilości argumentów do funkcji przez kolejność (krotka)
**kwargs - dodanie dowolnej ilości argumentów do funkcji przez nazwy (słownik)

10. Krotka ang. tuple
my_tuple = 1, 2 --> (1, 2)
my_tuple = ("abc") --> ('a', 'b', 'c')

Krotka jest typem niemutowalnym tzn po ustaleniu, nie można jej zmienić, nic dodać, nic odjąć.
Innymi wartościami niemutowalnymi są: str, int, float
Mutowalne są: lista, słownik

11. id(obiekt) - podaje id

12. Funkcja join na stringach
"-".join('a', 'b', 'c') --> a-b-c

13. Zaokrąglanie: round(20.87654, 2) --> 20.88

14. Jeżeli funkcja ma coś zwracać, zawsze RETURN

15. Lista składana (list comprehension)
new_list = [i * 2 for i in range(0, 10)] --> [0, 2, 4, 6, 8, 10, 12, 14, 16, 18]
new_list2 = [i *2 for i in range(0, 10) if i % 3 == 0] --> [0, 6, 12, 18]

16. Bez problemu możemy zamieniać listę na krotkę i odwrotnie:
my_list = [1, 2, 3, 4]
my_list = tuple(my_list) --> (1, 2, 3, 4)
my_list2 = list(my_list) --> [1, 2, 3, 4]

17. Ustawianie separatora
for key in star_wars:
    print(key, star_wars[key], sep=": ")

18. Wyrzuca ze słownika i klucze i wartości:
dict.items()

19. 
colors = ['red', 'blue', 'red', 'yellow', 'blue', 'red']
d = {}
for color in colors:
    if color in d:
        d[color] += 1
    else: 
        d[color] = 1
print(d)
