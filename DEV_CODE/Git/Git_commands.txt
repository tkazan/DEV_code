## HERE SOME USEFUL GIT COMMANDS ARE STORED
# Git is a VCS app (Version Control System)

## START WORKING WITH GIT: CONFIGURATION
1. git config --global user.name "Tobiasz Kazanowski"
2. git config --global user.email "tobiaszkazanowski@gmail.com"
3. git config --global core.editor nano

# To check git config
4. git config --list

## USEFUL COMMANDS

# clean terminal screen
5. clear 

# change folder (change directory) 
6. cd Desktop/Project 	# change to Desktop/Project
7. cd .. 		# one folder up
8. cd ~ 		# home folder

# show actual location
9. pwd 			# Printing the Writing Directory

# help 
10. git help
11. git help diff 	# help for diff command

# make a new folder in actual location e.g. Tobiasz
12. mkdir Tobiasz

# make a new, empty file in actual location e.g. first.txt
13. touch first.txt

# list of files and folders in actual location
14. ls
15. ls -la 	# with hidden ones

## WORKFLOW WITH GIT

# setting a local repository in a actual location
16. git init

# add changed files to a staging area
17. git add . 		# add all files
18. git add *.txt	# add all .txt files
19. git add first.txt	# add just first.txt file

# show git status
20. git status

# all changes made in actual repository
21. git log
22. git log --author="Tobiasz" 		# only changes made by user "Tobiasz Kazanowski"

# commiting changes (move files from staging area to a repository)
# date and hour are being added automatically
23. git commit -m "comment to a commiting changes here" 	# this comment is really important

# shortcut to commit changes without adding first (do not overuse!)
24. git commit -am "comment to a commiting changes here"	# this comment is really important

# show differences between working area and repo
25. git diff

# show diff between staging area and repo
26. git diff --staged

# delete (remove from staged) file before commiting
27. git reset File.name

# change file name or change file folder / folder and name (move)
# need to make a commit afterwards
28. git mv first.txt second.txt 		# change file name
29. git mv first.txt Folder/first.txt 		# change file folder
30. git mv first.txt Folder/second.txt 		# change file name and folder

# getting back to previous commit
# git log and find interesting commit
31. git checkout 7_first_signs_of_interesting_older_commit
32. git checkout 7_first_signs_of_interesting_older_commit first.txt 	
# get back changes only to file first.txt

# getting back a working area file from local repo
33. git checkout first.txt 

# ignore some files while commiting
34.touch .gitignore 		# makes a hidden file .gitignore
# add info about files to be ignored inside .gitignore file  

# removing files --> remember to commit afterwards
35. git rm *.txt 		# removes all .txt files

## WORKING WITH REMOTE REPO

# create remote repo on GitHub
36. git remote add origin URL_here

# push changes to remote repo
37. git push -u origin master

# or 

# copy an existing repo from GitHub
38. git clone URL_here

# push changes to a remote repo
39. git push 

# pull changes from remote repo to a local one
40. git pull origin master

## BRANCHES

# creating a new branch 
41. git branch branch_name

# switch to a branch
42. git checkout branch_name

# merge branch with master
43. git merge branch_name

# delete branch
44. git branch -d branch_name








 
