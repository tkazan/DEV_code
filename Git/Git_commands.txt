## HERE SOME USEFUL GIT COMMANDS ARE STORED
# Git is a VCS app (Version Control System)

## START WORKING WITH GIT: CONFIGURATION
1. git config --global user.name "Tobiasz Kazanowski"
2. git config --global user.email "tobiaszkazanowski@gmail.com"
3. git config --global core.editor nano

# To check git config and version
4. git config --list
5. git --version

## USEFUL COMMANDS

# clean terminal screen
6. clear 

# change folder (change directory) 
7. cd Desktop/Project 	# change to Desktop/Project
8. cd .. 		# one folder up
9. cd ~ 		# home folder

# show actual location
10. pwd 			# Printing the Writing Directory

# help 
11. git help
12. git help diff 	# help for diff command

# make a new folder in actual location e.g. Tobiasz
13. mkdir Tobiasz

# make a new, empty file in actual location e.g. first.txt
14. touch first.txt

# list of files and folders in actual location
15. ls
16. ls -la 	# with hidden ones and more details

## WORKFLOW WITH GIT

# setting a local repository in a actual location
17. git init

# add changed files to a staging area
18. git add . 		# add all files
19. git add *.txt	# add all .txt files
20. git add first.txt	# add just first.txt file

# show git status
21. git status

# all changes made in actual repository
22. git log
23. git log --author="Tobiasz" 		# only changes made by user "Tobiasz Kazanowski"

# commiting changes (move files from staging area to a repository)
# date and hour are being added automatically
24. git commit -m "comment to a commiting changes here" 	# this comment is really important

# shortcut to commit changes without adding first (do not overuse!)
25. git commit -am "comment to a commiting changes here"	# this comment is really important

# add changes to a previous commit
26. git commit -amend

# show differences between working area and repo
27. git diff

# show diff between staging area and repo
28. git diff --staged

# delete (remove from staged) file before commiting
29. git reset File.name
30. git reset 		# reset all files

# change file name or change file folder / folder and name (move)
# need to make a commit afterwards
31. git mv first.txt second.txt 		# change file name
32. git mv first.txt Folder/first.txt 		# change file folder
33. git mv first.txt Folder/second.txt 		# change file name and folder

# getting back to previous commit
# git log and find interesting commit
34. git checkout 7_first_signs_of_interesting_older_commit
35. git checkout 7_first_signs_of_interesting_older_commit first.txt 	
# get back changes only to file first.txt

# getting back a working copy file from local repo
36. git checkout first.txt 

# ignore some files while commiting
37.touch .gitignore 		# makes a hidden file .gitignore
38. sudo gedit .gitignore	# open .gitignore file in gedit editor
# add info about files to be ignored inside .gitignore file  

# removing files --> remember to commit afterwards
39. git rm *.txt 		# removes all .txt files

## WORKING WITH REMOTE REPO

# create remote repo on GitHub
40. git remote add origin URL_here

# push changes to remote repo
41. git push -u origin master

# copy an existing repo from GitHub
42. git clone URL_here

# push changes to a remote repo
43. git push 

# pull changes from remote repo to a local one
44. git pull origin master

## BRANCHES

# show all branches
45. git branch

# creating a new branch 
46. git branch branch_name

# switch to a branch
47. git checkout branch_name

# merge branch with master (when being in master branch)
48. git merge branch_name

# delete branch
49. git branch -d branch_name








 
